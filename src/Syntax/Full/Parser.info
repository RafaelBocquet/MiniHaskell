-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.4 from Parser.y
-----------------------------------------------------------------------------


terminal conSymId is unused
terminal char is unused
terminal string is unused
terminal 'case' is unused
terminal 'deriving' is unused
terminal 'do' is unused
terminal 'else' is unused
terminal 'if' is unused
terminal 'in' is unused
terminal 'let' is unused
terminal 'of' is unused
terminal 'then' is unused
terminal '_' is unused
terminal '..' is unused
terminal ':' is unused
terminal '=' is unused
terminal '\\' is unused
terminal '|' is unused
terminal '<-' is unused
terminal '->' is unused
terminal '@' is unused
terminal '~' is unused
terminal '=>' is unused
terminal '(' is unused
terminal ')' is unused
terminal '[' is unused
terminal ']' is unused
terminal '`' is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> module                             (0)
	module -> moduleHeader moduleBody                  (1)
	moduleHeader -> 'module' moduleName 'where'        (2)
	moduleHeader ->                                    (3)
	moduleBody -> '{' separated_nonempty_list(importDeclaration,nonempty_list(';')) '}'   (4)
	moduleBody -> '{' separated_nonempty_list(importDeclaration,nonempty_list(';')) separated_nonempty_list(topDeclaration,nonempty_list(';')) '}'   (5)
	moduleBody -> '{' separated_nonempty_list(topDeclaration,nonempty_list(';')) '}'   (6)
	moduleName -> conId                                (7)
	importDeclaration -> 'import' moduleName           (8)
	topDeclaration -> 'type'                           (9)
	topDeclaration -> 'data'                           (10)
	topDeclaration -> 'newtype'                        (11)
	topDeclaration -> 'class'                          (12)
	topDeclaration -> 'instance'                       (13)
	topDeclaration -> 'default'                        (14)
	topDeclaration -> declaration                      (15)
	declaration -> genDeclaration                      (16)
	genDeclaration -> fixity option(integer) symId     (17)
	genDeclaration -> separated_nonempty_list(varId,',') '::'   (18)
	fixity -> 'infixl'                                 (19)
	fixity -> 'infixr'                                 (20)
	fixity -> 'infix'                                  (21)
	nonempty_list(';') -> list(';') ';'                (22)
	option(integer) -> integer                         (23)
	option(integer) ->                                 (24)
	separated_nonempty_list(importDeclaration,nonempty_list(';')) -> separated_nonempty_list(importDeclaration,nonempty_list(';')) nonempty_list(';') importDeclaration   (25)
	separated_nonempty_list(importDeclaration,nonempty_list(';')) -> importDeclaration   (26)
	separated_nonempty_list(topDeclaration,nonempty_list(';')) -> separated_nonempty_list(topDeclaration,nonempty_list(';')) nonempty_list(';') topDeclaration   (27)
	separated_nonempty_list(topDeclaration,nonempty_list(';')) -> topDeclaration   (28)
	separated_nonempty_list(varId,',') -> separated_nonempty_list(varId,',') ',' varId   (29)
	separated_nonempty_list(varId,',') -> varId        (30)
	list(';') -> list(';') ';'                         (31)
	list(';') ->                                       (32)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	varId          { t | isVariableIdentifier t }
	conId          { t | isConstructorIdentifier t }
	symId          { t | isSymbolIdentifier t }
	conSymId       { t | isConstructorSymbolIdentifier t }
	integer        { TkInteger _ }
	char           { TkChar _ }
	string         { TkString _ }
	'case'         { TkCase }
	'class'        { TkClass }
	'data'         { TkData }
	'default'      { TkDefault }
	'deriving'     { TkDeriving }
	'do'           { TkDo }
	'else'         { TkElse }
	'if'           { TkIf }
	'import'       { TkImport }
	'in'           { TkIn }
	'infix'        { TkInfix }
	'infixl'       { TkInfixl }
	'infixr'       { TkInfixr }
	'instance'     { TkInstance }
	'let'          { TkLet }
	'module'       { TkModule }
	'newtype'      { TkNewtype }
	'of'           { TkOf }
	'then'         { TkThen }
	'type'         { TkType }
	'where'        { TkWhere }
	'_'            { TkUnderscore }
	'..'           { TkDoubleDot }
	':'            { TkColon }
	'::'           { TkDoubleColon }
	'='            { TkEqual }
	'\\'           { TkLambda }
	'|'            { TkPipe }
	'<-'           { TkLArrow }
	'->'           { TkRArrow }
	'@'            { TkAt }
	'~'            { TkTilde }
	'=>'           { TkFatArrow }
	'('            { TkLParen }
	')'            { TkRParen }
	','            { TkComma }
	';'            { TkSemiColon }
	'['            { TkLBracket }
	']'            { TkRBracket }
	'`'            { TkBackTick }
	'{'            { TkLBrace }
	'}'            { TkRBrace }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	module          rule  1
	moduleHeader    rules 2, 3
	moduleBody      rules 4, 5, 6
	moduleName      rule  7
	importDeclaration rule  8
	topDeclaration  rules 9, 10, 11, 12, 13, 14, 15
	declaration     rule  16
	genDeclaration  rules 17, 18
	fixity          rules 19, 20, 21
	nonempty_list(';') rule  22
	option(integer) rules 23, 24
	separated_nonempty_list(importDeclaration,nonempty_list(';')) rules 25, 26
	separated_nonempty_list(topDeclaration,nonempty_list(';')) rules 27, 28
	separated_nonempty_list(varId,',') rules 29, 30
	list(';')       rules 31, 32

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'module'       shift, and enter state 3
	'{'            reduce using rule 3

	module         goto state 4
	moduleHeader   goto state 2

State 1


	'module'       shift, and enter state 3

	moduleHeader   goto state 2

State 2

	module -> moduleHeader . moduleBody                 (rule 1)

	'{'            shift, and enter state 8

	moduleBody     goto state 7

State 3

	moduleHeader -> 'module' . moduleName 'where'       (rule 2)

	conId          shift, and enter state 6

	moduleName     goto state 5

State 4

	%start_parse -> module .                            (rule 0)

	%eof           accept


State 5

	moduleHeader -> 'module' moduleName . 'where'       (rule 2)

	'where'        shift, and enter state 28


State 6

	moduleName -> conId .                               (rule 7)

	varId          reduce using rule 7
	'class'        reduce using rule 7
	'data'         reduce using rule 7
	'default'      reduce using rule 7
	'infix'        reduce using rule 7
	'infixl'       reduce using rule 7
	'infixr'       reduce using rule 7
	'instance'     reduce using rule 7
	'newtype'      reduce using rule 7
	'type'         reduce using rule 7
	'where'        reduce using rule 7
	';'            reduce using rule 7
	'}'            reduce using rule 7


State 7

	module -> moduleHeader moduleBody .                 (rule 1)

	%eof           reduce using rule 1


State 8

	moduleBody -> '{' . separated_nonempty_list(importDeclaration,nonempty_list(';')) '}'    (rule 4)
	moduleBody -> '{' . separated_nonempty_list(importDeclaration,nonempty_list(';')) separated_nonempty_list(topDeclaration,nonempty_list(';')) '}'    (rule 5)
	moduleBody -> '{' . separated_nonempty_list(topDeclaration,nonempty_list(';')) '}'    (rule 6)

	varId          shift, and enter state 17
	'class'        shift, and enter state 18
	'data'         shift, and enter state 19
	'default'      shift, and enter state 20
	'import'       shift, and enter state 21
	'infix'        shift, and enter state 22
	'infixl'       shift, and enter state 23
	'infixr'       shift, and enter state 24
	'instance'     shift, and enter state 25
	'newtype'      shift, and enter state 26
	'type'         shift, and enter state 27

	importDeclarationgoto state 9
	topDeclaration goto state 10
	declaration    goto state 11
	genDeclaration goto state 12
	fixity         goto state 13
	separated_nonempty_list(importDeclaration,nonempty_list(';'))goto state 14
	separated_nonempty_list(topDeclaration,nonempty_list(';'))goto state 15
	separated_nonempty_list(varId,',')goto state 16

State 9

	separated_nonempty_list(importDeclaration,nonempty_list(';')) -> importDeclaration .    (rule 26)

	varId          reduce using rule 26
	'class'        reduce using rule 26
	'data'         reduce using rule 26
	'default'      reduce using rule 26
	'infix'        reduce using rule 26
	'infixl'       reduce using rule 26
	'infixr'       reduce using rule 26
	'instance'     reduce using rule 26
	'newtype'      reduce using rule 26
	'type'         reduce using rule 26
	';'            reduce using rule 26
	'}'            reduce using rule 26


State 10

	separated_nonempty_list(topDeclaration,nonempty_list(';')) -> topDeclaration .    (rule 28)

	';'            reduce using rule 28
	'}'            reduce using rule 28


State 11

	topDeclaration -> declaration .                     (rule 15)

	';'            reduce using rule 15
	'}'            reduce using rule 15


State 12

	declaration -> genDeclaration .                     (rule 16)

	';'            reduce using rule 16
	'}'            reduce using rule 16


State 13

	genDeclaration -> fixity . option(integer) symId    (rule 17)

	symId          reduce using rule 24
	integer        shift, and enter state 39

	option(integer)goto state 38

State 14

	moduleBody -> '{' separated_nonempty_list(importDeclaration,nonempty_list(';')) . '}'    (rule 4)
	moduleBody -> '{' separated_nonempty_list(importDeclaration,nonempty_list(';')) . separated_nonempty_list(topDeclaration,nonempty_list(';')) '}'    (rule 5)
	separated_nonempty_list(importDeclaration,nonempty_list(';')) -> separated_nonempty_list(importDeclaration,nonempty_list(';')) . nonempty_list(';') importDeclaration    (rule 25)

	varId          shift, and enter state 17
	'class'        shift, and enter state 18
	'data'         shift, and enter state 19
	'default'      shift, and enter state 20
	'infix'        shift, and enter state 22
	'infixl'       shift, and enter state 23
	'infixr'       shift, and enter state 24
	'instance'     shift, and enter state 25
	'newtype'      shift, and enter state 26
	'type'         shift, and enter state 27
	';'            reduce using rule 32
	'}'            shift, and enter state 37

	topDeclaration goto state 10
	declaration    goto state 11
	genDeclaration goto state 12
	fixity         goto state 13
	nonempty_list(';')goto state 35
	separated_nonempty_list(topDeclaration,nonempty_list(';'))goto state 36
	separated_nonempty_list(varId,',')goto state 16
	list(';')      goto state 33

State 15

	moduleBody -> '{' separated_nonempty_list(topDeclaration,nonempty_list(';')) . '}'    (rule 6)
	separated_nonempty_list(topDeclaration,nonempty_list(';')) -> separated_nonempty_list(topDeclaration,nonempty_list(';')) . nonempty_list(';') topDeclaration    (rule 27)

	';'            reduce using rule 32
	'}'            shift, and enter state 34

	nonempty_list(';')goto state 32
	list(';')      goto state 33

State 16

	genDeclaration -> separated_nonempty_list(varId,',') . '::'    (rule 18)
	separated_nonempty_list(varId,',') -> separated_nonempty_list(varId,',') . ',' varId    (rule 29)

	'::'           shift, and enter state 30
	','            shift, and enter state 31


State 17

	separated_nonempty_list(varId,',') -> varId .       (rule 30)

	'::'           reduce using rule 30
	','            reduce using rule 30


State 18

	topDeclaration -> 'class' .                         (rule 12)

	';'            reduce using rule 12
	'}'            reduce using rule 12


State 19

	topDeclaration -> 'data' .                          (rule 10)

	';'            reduce using rule 10
	'}'            reduce using rule 10


State 20

	topDeclaration -> 'default' .                       (rule 14)

	';'            reduce using rule 14
	'}'            reduce using rule 14


State 21

	importDeclaration -> 'import' . moduleName          (rule 8)

	conId          shift, and enter state 6

	moduleName     goto state 29

State 22

	fixity -> 'infix' .                                 (rule 21)

	symId          reduce using rule 21
	integer        reduce using rule 21


State 23

	fixity -> 'infixl' .                                (rule 19)

	symId          reduce using rule 19
	integer        reduce using rule 19


State 24

	fixity -> 'infixr' .                                (rule 20)

	symId          reduce using rule 20
	integer        reduce using rule 20


State 25

	topDeclaration -> 'instance' .                      (rule 13)

	';'            reduce using rule 13
	'}'            reduce using rule 13


State 26

	topDeclaration -> 'newtype' .                       (rule 11)

	';'            reduce using rule 11
	'}'            reduce using rule 11


State 27

	topDeclaration -> 'type' .                          (rule 9)

	';'            reduce using rule 9
	'}'            reduce using rule 9


State 28

	moduleHeader -> 'module' moduleName 'where' .       (rule 2)

	'{'            reduce using rule 2


State 29

	importDeclaration -> 'import' moduleName .          (rule 8)

	varId          reduce using rule 8
	'class'        reduce using rule 8
	'data'         reduce using rule 8
	'default'      reduce using rule 8
	'infix'        reduce using rule 8
	'infixl'       reduce using rule 8
	'infixr'       reduce using rule 8
	'instance'     reduce using rule 8
	'newtype'      reduce using rule 8
	'type'         reduce using rule 8
	';'            reduce using rule 8
	'}'            reduce using rule 8


State 30

	genDeclaration -> separated_nonempty_list(varId,',') '::' .    (rule 18)

	';'            reduce using rule 18
	'}'            reduce using rule 18


State 31

	separated_nonempty_list(varId,',') -> separated_nonempty_list(varId,',') ',' . varId    (rule 29)

	varId          shift, and enter state 45


State 32

	separated_nonempty_list(topDeclaration,nonempty_list(';')) -> separated_nonempty_list(topDeclaration,nonempty_list(';')) nonempty_list(';') . topDeclaration    (rule 27)

	varId          shift, and enter state 17
	'class'        shift, and enter state 18
	'data'         shift, and enter state 19
	'default'      shift, and enter state 20
	'infix'        shift, and enter state 22
	'infixl'       shift, and enter state 23
	'infixr'       shift, and enter state 24
	'instance'     shift, and enter state 25
	'newtype'      shift, and enter state 26
	'type'         shift, and enter state 27

	topDeclaration goto state 44
	declaration    goto state 11
	genDeclaration goto state 12
	fixity         goto state 13
	separated_nonempty_list(varId,',')goto state 16

State 33

	nonempty_list(';') -> list(';') . ';'               (rule 22)
	list(';') -> list(';') . ';'                        (rule 31)

	';'            shift, and enter state 43


State 34

	moduleBody -> '{' separated_nonempty_list(topDeclaration,nonempty_list(';')) '}' .    (rule 6)

	%eof           reduce using rule 6


State 35

	separated_nonempty_list(importDeclaration,nonempty_list(';')) -> separated_nonempty_list(importDeclaration,nonempty_list(';')) nonempty_list(';') . importDeclaration    (rule 25)

	'import'       shift, and enter state 21

	importDeclarationgoto state 42

State 36

	moduleBody -> '{' separated_nonempty_list(importDeclaration,nonempty_list(';')) separated_nonempty_list(topDeclaration,nonempty_list(';')) . '}'    (rule 5)
	separated_nonempty_list(topDeclaration,nonempty_list(';')) -> separated_nonempty_list(topDeclaration,nonempty_list(';')) . nonempty_list(';') topDeclaration    (rule 27)

	';'            reduce using rule 32
	'}'            shift, and enter state 41

	nonempty_list(';')goto state 32
	list(';')      goto state 33

State 37

	moduleBody -> '{' separated_nonempty_list(importDeclaration,nonempty_list(';')) '}' .    (rule 4)

	%eof           reduce using rule 4


State 38

	genDeclaration -> fixity option(integer) . symId    (rule 17)

	symId          shift, and enter state 40


State 39

	option(integer) -> integer .                        (rule 23)

	symId          reduce using rule 23


State 40

	genDeclaration -> fixity option(integer) symId .    (rule 17)

	';'            reduce using rule 17
	'}'            reduce using rule 17


State 41

	moduleBody -> '{' separated_nonempty_list(importDeclaration,nonempty_list(';')) separated_nonempty_list(topDeclaration,nonempty_list(';')) '}' .    (rule 5)

	%eof           reduce using rule 5


State 42

	separated_nonempty_list(importDeclaration,nonempty_list(';')) -> separated_nonempty_list(importDeclaration,nonempty_list(';')) nonempty_list(';') importDeclaration .    (rule 25)

	varId          reduce using rule 25
	'class'        reduce using rule 25
	'data'         reduce using rule 25
	'default'      reduce using rule 25
	'infix'        reduce using rule 25
	'infixl'       reduce using rule 25
	'infixr'       reduce using rule 25
	'instance'     reduce using rule 25
	'newtype'      reduce using rule 25
	'type'         reduce using rule 25
	';'            reduce using rule 25
	'}'            reduce using rule 25


State 43

	nonempty_list(';') -> list(';') ';' .               (rule 22)
	list(';') -> list(';') ';' .                        (rule 31)

	varId          reduce using rule 22
	'class'        reduce using rule 22
	'data'         reduce using rule 22
	'default'      reduce using rule 22
	'import'       reduce using rule 22
	'infix'        reduce using rule 22
	'infixl'       reduce using rule 22
	'infixr'       reduce using rule 22
	'instance'     reduce using rule 22
	'newtype'      reduce using rule 22
	'type'         reduce using rule 22
	';'            reduce using rule 31


State 44

	separated_nonempty_list(topDeclaration,nonempty_list(';')) -> separated_nonempty_list(topDeclaration,nonempty_list(';')) nonempty_list(';') topDeclaration .    (rule 27)

	';'            reduce using rule 27
	'}'            reduce using rule 27


State 45

	separated_nonempty_list(varId,',') -> separated_nonempty_list(varId,',') ',' varId .    (rule 29)

	'::'           reduce using rule 29
	','            reduce using rule 29


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 33
Number of terminals: 49
Number of non-terminals: 16
Number of states: 46
